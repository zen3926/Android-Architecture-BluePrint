apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.blueprint"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        resConfigs "en" // remove unused alternative resources

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // For shared test cases run by espresso
//    android {
//        sourceSets {
//            String sharedTestDir = 'src/sharedTest/java'
//            test {
//                java.srcDirs += sharedTestDir
//            }
//            androidTest {
//                java.srcDirs += sharedTestDir
//            }
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "market"

    // If more flavors are needed, consider using flavor dimensions. ie free vs paid
    productFlavors {
        google {
            dimension "market"
            applicationIdSuffix = ".major"
        }
        amazon {
            dimension "market"
        }
    }

    // Remove amazonDebug if it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'debug' && variant.getFlavors().get(0).name == 'amazon') {
            variant.setIgnore(true)
        }
    }

    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Kotlin coroutines
    def coroutines = '1.3.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Android KTX
    implementation 'androidx.core:core-ktx:1.3.0'

    // Support libraries
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.annotation:annotation:1.1.0'

    // Navigation Components
    implementation "androidx.navigation:navigation-fragment-ktx:$archNavigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$archNavigationVersion"

    // Architecture Components: viewModel and liveData
    def archLifecycleVersion = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"

    // Architecture Components: navigation
    def roomVersion = '2.2.5'
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Security lib
    implementation 'androidx.security:security-crypto:1.0.0-rc02'

    // Work Manager
    def workVersion = "2.3.4"
    implementation "androidx.work:work-runtime-ktx:$workVersion"

    // Biometric
    implementation "androidx.biometric:biometric:1.0.1"

    // Networking: retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    // Moshi for parsing Json Format
    def moshiVersion = '1.9.2'
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"

    // Timber for Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Glide for image loading
    def glideVersion = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // Unit Test
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.1'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation 'androidx.test:core-ktx:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.fragment:fragment-testing:1.2.4'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'io.mockk:mockk:1.10.0'
    testImplementation 'com.google.truth:truth:1.0.1'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "androidx.work:work-testing:$workVersion"
}
